<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">
    <!--    当scan=true的时候，配置文件发生改变的时候，会重新加载 scanPeriod 多长时间去查看配置 文件是否改变-->
    <!--定义参数常量·-->
    <!-- 级别由低到高   TRANCE<DEBUG<INFO<WARN<ERROR-->
    <property name="log.level" value="debug"/>
    <!-- 保存30天内的日志 -->
    <property name="log.maxHistory" value="30"/>
    <!-- 日志存储的根路径 tomcat实例的根目录 -->
    <property name="log.filePath" value="${catalina.base}/logs/webapps"/>
    <!-- 日志展现的格式 时间 线程 日志级别 package+class 日志信息 -->
    <property name="log.pattern" value="%d{yyyy-MM-dd HH:mm:ss.sss} [%thread] %-5level %logger{50} - %msg%n"/>

    <!-- 日志输出的目的地console 控制台设置-->
    <appender name="consoleAppender" class="ch.qos.logback.core.ConsoleAppender">
        <!-- 日志信息格式化为字符串并输出到相应文件中 -->
        <encoder>
            <pattern>${log.pattern}</pattern>
        </encoder>
    </appender>

    <!--    DEBUG 日志输出的目的地DEBUG-->
    <appender name="debugAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--文件路径-->
        <file>${log.filePath}/debug.log</file>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 文件名称-->
            <fileNamePattern>
                ${log.filePath}/debug/debug.%d{yyyy-MM-dd}.log.gz
            </fileNamePattern>
            <!-- 文件最大保存历史数量-->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <!-- 日志信息格式化为字符串并输出到相应文件中 -->
        <encoder>
            <pattern>${log.pattern}</pattern>
            <!-- 过滤掉不是debuglevel的日志 -->
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>DEBUG</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
            </filter>
        </encoder>
    </appender>

    <!--    info 日志输出的目的地DEBUG-->
    <appender name="debugAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--文件路径-->
        <file>${log.filePath}/info.log</file>
        <!--      滚动策略，写满即往fileName里面存日志，滚动生成新文件  -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 文件名称-->
            <fileNamePattern>
                ${log.filePath}/info/info.%d{yyyy-MM-dd}.log.gz
            </fileNamePattern>
            <!-- 文件最大保存历史数量-->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <!-- 日志信息格式化为字符串并输出到相应文件中 -->
        <encoder>
            <pattern>${log.pattern}</pattern>
            <!-- 过滤掉不是INFOlevel的日志 -->
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>INFO</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
            </filter>
        </encoder>
    </appender>

    <!--    error 日志输出的目的地DEBUG-->
    <appender name="debugAppender" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--文件路径-->
        <file>${log.filePath}/error.log</file>
        <!--      滚动策略，写满即往fileName里面存日志，滚动生成新文件  -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 文件名称-->
            <fileNamePattern>
                ${log.filePath}/error/error.%d{yyyy-MM-dd}.log.gz
            </fileNamePattern>
            <!-- 文件最大保存历史数量-->
            <maxHistory>${log.maxHistory}</maxHistory>
        </rollingPolicy>
        <!-- 日志信息格式化为字符串并输出到相应文件中 -->
        <encoder>
            <pattern>${log.pattern}</pattern>
            <!-- 过滤掉不是error level的日志 -->
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>ERROR</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
            </filter>
        </encoder>
    </appender>

    <!--   LOGGER 主要存放日志对象 -->
    <!-- name:监听包com.hytxwz.o2o  addtivity="true":引入父类中的appender-ref -->
    <logger name="com.fshare" level="${log.level}" additivity="true">
        <!--        additivity表示继承了root 父类的logger,所以在控制台中也可以输出这些log,
        如果level没有指定，则引用父类的info-->
        <appender-ref ref="debugAppender"/>
        <appender-ref ref="infoAppender"/>
        <appender-ref ref="errorAppender"/>
    </logger>
    <!-- 父类logger -->>
    <root level="info">
        <appender-ref ref="consoleAppender"/>
    </root>
</configuration>